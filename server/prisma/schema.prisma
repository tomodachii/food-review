generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

model address {
address_id String @id @default(uuid())
address String @db.VarChar(255)
district_id String
district district @relation(fields: [district_id], references: [district_id])
restaurant restaurant[]
}

model category {
category_id String @id @default(uuid())
category_name String @db.VarChar(255)
review review[]
}

model district {
district_id String @id @default(uuid())
district_name String @unique @db.VarChar(255)
address address[]
}

model restaurant {
restaurant_id String @id @default(uuid())
address_id String
restaurant_rating Float @default(0)
restaurant_name String @db.VarChar(1000)
restaurant_image String? @db.VarChar(1000)
address address @relation(fields: [address_id], references: [address_id])
review review[]
}

model review {
review_id String @id @default(uuid())
title String @db.VarChar(1000)
description String @db.VarChar(5000)
likes Int @default(0)
user_rating Float
service Int @default(0)
price Int @default(0)
food Int @default(0)
ambience Int @default(0)
review_image String @db.VarChar(1000)
restaurant_id String
category_id String
category category @relation(fields: [category_id], references: [category_id])
restaurant restaurant @relation(fields: [restaurant_id], references: [restaurant_id])
comments comments[]
table_review table_review[]
}

model table_review {
user_id String
review_id String @id
create_at DateTime @default(now())
action String? @db.VarChar(1000)
users users @relation(fields: [user_id], references: [user_id])
review review @relation(fields: [review_id], references: [review_id])
}

model comments {
comment_id String @id @default(uuid())
comment_content String @db.VarChar(1000)
comment_date DateTime @default(now())
review_id String
user_id String
review review @relation(fields: [review_id], references: [review_id])
users users @relation(fields: [user_id], references: [user_id])
subcomments subcomments[]
}

model subcomments {
subcomment_id String @id @default(uuid())
subcomment_content String @db.VarChar(1000)
subcomment_date DateTime @default(now())
user_id String
comment_id String
users users @relation(fields: [user_id], references: [user_id])
comments comments @relation(fields: [comment_id], references: [comment_id])
}

model users {
user_id String @id @default(uuid())
username String @db.VarChar(1000)
password String @db.VarChar(1000)
email String @db.VarChar(1000)
role Int @default(1)
phone_number String? @db.VarChar(255)
avatar String @db.VarChar(1000)
provider String? @default("") @db.VarChar(30)
table_review table_review[]
subcomments subcomments[]
comments comments[]
}